commit 3004cfd6204927c1294060b849029cf0c2651074
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Thu Dec 6 19:42:28 2018 +0100

    Revert "usb: dwc3: pci: Use devm functions to get the phy GPIOs"
    
    Commit 211f658b7b40 ("usb: dwc3: pci: Use devm functions to get
    the phy GPIOs") changed the code to claim the PHY GPIOs permanently
    for Intel Baytrail devices.
    
    This causes issues when the actual PHY driver attempts to claim the
    same GPIO descriptors. For example, tusb1210 now fails to probe with:
    
      tusb1210: probe of dwc3.0.auto.ulpi failed with error -16 (EBUSY)
    
    dwc3-pci needs to turn on the PHY once before dwc3 is loaded, but
    usually the PHY driver will then hold the GPIOs to turn off the
    PHY when requested (e.g. during suspend).
    
    To fix the problem, this reverts the commit to restore the old
    behavior to put the GPIOs immediately after usage.
    
    Link: https://www.spinics.net/lists/linux-usb/msg174681.html
    Cc: stable@vger.kernel.org
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

diff --git a/drivers/usb/dwc3/dwc3-pci.c b/drivers/usb/dwc3/dwc3-pci.c
index 842795856bf4..fdc6e4e403e8 100644
--- a/drivers/usb/dwc3/dwc3-pci.c
+++ b/drivers/usb/dwc3/dwc3-pci.c
@@ -170,20 +170,20 @@ static int dwc3_pci_quirks(struct dwc3_pci *dwc)
 			 * put the gpio descriptors again here because the phy driver
 			 * might want to grab them, too.
 			 */
-			gpio = devm_gpiod_get_optional(&pdev->dev, "cs",
-						       GPIOD_OUT_LOW);
+			gpio = gpiod_get_optional(&pdev->dev, "cs", GPIOD_OUT_LOW);
 			if (IS_ERR(gpio))
 				return PTR_ERR(gpio);
 
 			gpiod_set_value_cansleep(gpio, 1);
+			gpiod_put(gpio);
 
-			gpio = devm_gpiod_get_optional(&pdev->dev, "reset",
-						       GPIOD_OUT_LOW);
+			gpio = gpiod_get_optional(&pdev->dev, "reset", GPIOD_OUT_LOW);
 			if (IS_ERR(gpio))
 				return PTR_ERR(gpio);
 
 			if (gpio) {
 				gpiod_set_value_cansleep(gpio, 1);
+				gpiod_put(gpio);
 				usleep_range(10000, 11000);
 			}
 		}
