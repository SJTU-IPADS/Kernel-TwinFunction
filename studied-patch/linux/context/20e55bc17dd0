commit 20e55bc17dd01f13cec0eb17e76e9511b23963ef
Author: Juergen Gross <jgross@suse.com>
Date:   Sun Feb 10 08:40:56 2019 +0100

    x86/mm: Make set_pmd_at() paravirt aware
    
    set_pmd_at() calls native_set_pmd() unconditionally on x86. This was
    fine as long as only huge page entries were written via set_pmd_at(),
    as Xen pv guests don't support those.
    
    Commit 2c91bd4a4e2e53 ("mm: speed up mremap by 20x on large regions")
    introduced a usage of set_pmd_at() possible on pv guests, leading to
    failures like:
    
    BUG: unable to handle kernel paging request at ffff888023e26778
    #PF error: [PROT] [WRITE]
    RIP: e030:move_page_tables+0x7c1/0xae0
    move_vma.isra.3+0xd1/0x2d0
    __se_sys_mremap+0x3c6/0x5b0
     do_syscall_64+0x49/0x100
    entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Make set_pmd_at() paravirt aware by just letting it use set_pmd().
    
    Fixes: 2c91bd4a4e2e53 ("mm: speed up mremap by 20x on large regions")
    Reported-by: Sander Eikelenboom <linux@eikelenboom.it>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: xen-devel@lists.xenproject.org
    Cc: boris.ostrovsky@oracle.com
    Cc: sstabellini@kernel.org
    Cc: hpa@zytor.com
    Cc: bp@alien8.de
    Cc: torvalds@linux-foundation.org
    Link: https://lkml.kernel.org/r/20190210074056.11842-1-jgross@suse.com

diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h
index 40616e805292..2779ace16d23 100644
--- a/arch/x86/include/asm/pgtable.h
+++ b/arch/x86/include/asm/pgtable.h
@@ -1065,7 +1065,7 @@ static inline void native_set_pte_at(struct mm_struct *mm, unsigned long addr,
 static inline void set_pmd_at(struct mm_struct *mm, unsigned long addr,
 			      pmd_t *pmdp, pmd_t pmd)
 {
-	native_set_pmd(pmdp, pmd);
+	set_pmd(pmdp, pmd);
 }
 
 static inline void set_pud_at(struct mm_struct *mm, unsigned long addr,
