commit e0392cf7c53a2c03dbda93de4073c78609b88c51
Author: Michal Hocko <mhocko@suse.com>
Date:   Fri Dec 28 00:33:42 2018 -0800

    mm: lower the printk loglevel for __dump_page messages
    
    __dump_page messages use KERN_EMERG resp.  KERN_ALERT loglevel (this is
    the case since 2004).  Most callers of this function are really detecting
    a critical page state and BUG right after.  On the other hand the function
    is called also from contexts which just want to inform about the page
    state and those would rather not disrupt logs that much (e.g.  some
    systems route these messages to the normal console).
    
    Reduce the loglevel to KERN_WARNING to make dump_page easier to reuse for
    other contexts while those messages will still make it to the kernel log
    in most setups.  Even if the loglevel setup filters warnings away those
    paths that are really critical already print the more targeted error or
    panic and that should make it to the kernel log.
    
    [mhocko@kernel.org: fix __dump_page()]
      Link: http://lkml.kernel.org/r/20181212142540.GA7378@dhcp22.suse.cz
    [akpm@linux-foundation.org: s/KERN_WARN/KERN_WARNING/, per Michal]
    Link: http://lkml.kernel.org/r/20181107101830.17405-3-mhocko@kernel.org
    Signed-off-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: Baoquan He <bhe@redhat.com>
    Cc: Oscar Salvador <OSalvador@suse.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: William Kucharski <william.kucharski@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/mm/debug.c b/mm/debug.c
index 6d9aa5359109..72daa4b087ba 100644
--- a/mm/debug.c
+++ b/mm/debug.c
@@ -54,7 +54,7 @@ void __dump_page(struct page *page, const char *reason)
 	 * dump_page() when detected.
 	 */
 	if (page_poisoned) {
-		pr_emerg("page:%px is uninitialized and poisoned", page);
+		pr_warn("page:%px is uninitialized and poisoned", page);
 		goto hex_only;
 	}
 
@@ -65,39 +65,39 @@ void __dump_page(struct page *page, const char *reason)
 	 */
 	mapcount = PageSlab(page) ? 0 : page_mapcount(page);
 
-	pr_emerg("page:%px count:%d mapcount:%d mapping:%px index:%#lx",
+	pr_warn("page:%px count:%d mapcount:%d mapping:%px index:%#lx",
 		  page, page_ref_count(page), mapcount,
 		  page->mapping, page_to_pgoff(page));
 	if (PageCompound(page))
 		pr_cont(" compound_mapcount: %d", compound_mapcount(page));
 	pr_cont("\n");
 	if (PageAnon(page))
-		pr_emerg("anon ");
+		pr_warn("anon ");
 	else if (PageKsm(page))
-		pr_emerg("ksm ");
+		pr_warn("ksm ");
 	else if (mapping) {
-		pr_emerg("%ps ", mapping->a_ops);
+		pr_warn("%ps ", mapping->a_ops);
 		if (mapping->host->i_dentry.first) {
 			struct dentry *dentry;
 			dentry = container_of(mapping->host->i_dentry.first, struct dentry, d_u.d_alias);
-			pr_emerg("name:\"%pd\" ", dentry);
+			pr_warn("name:\"%pd\" ", dentry);
 		}
 	}
 	BUILD_BUG_ON(ARRAY_SIZE(pageflag_names) != __NR_PAGEFLAGS + 1);
 
-	pr_emerg("flags: %#lx(%pGp)\n", page->flags, &page->flags);
+	pr_warn("flags: %#lx(%pGp)\n", page->flags, &page->flags);
 
 hex_only:
-	print_hex_dump(KERN_ALERT, "raw: ", DUMP_PREFIX_NONE, 32,
+	print_hex_dump(KERN_WARNING, "raw: ", DUMP_PREFIX_NONE, 32,
 			sizeof(unsigned long), page,
 			sizeof(struct page), false);
 
 	if (reason)
-		pr_alert("page dumped because: %s\n", reason);
+		pr_warn("page dumped because: %s\n", reason);
 
 #ifdef CONFIG_MEMCG
 	if (!page_poisoned && page->mem_cgroup)
-		pr_alert("page->mem_cgroup:%px\n", page->mem_cgroup);
+		pr_warn("page->mem_cgroup:%px\n", page->mem_cgroup);
 #endif
 }
 
