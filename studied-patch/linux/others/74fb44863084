commit 74fb44863084275b952f21ec6a024af0e2e75cb8
Author: Vincent Guittot <vincent.guittot@linaro.org>
Date:   Thu Feb 21 08:59:02 2019 +0100

    PM-runtime: Fix deadlock when canceling hrtimer
    
    When rpm_resume() desactivates the autosuspend timer, it should only
    try to cancel hrtimer but not wait for the handler to finish, because
    both rpm_resume() and pm_suspend_timer_fn() take the power.lock.
    
    A deadlock is possible as follows:
    
    CPU0                              CPU1
    rpm_resume()
      spin_lock_irqsave
                                      pm_suspend_timer_fn()
                                        spin_lock_irqsave
      pm_runtime_deactivate_timer()
        hrtimer_cancel()
    
    It is sufficient to call hrtimer_try_to_cancel() from
    pm_runtime_deactivate_timer(), because dev->power.timer_expires
    reset to 0 by it, so use that function instead of hrtimer_cancel().
    
    Fixes: 8234f6734c5d ("PM-runtime: Switch autosuspend over to using hrtimers")
    Reported-by: Sunzhaosheng Sun(Zhaosheng) <sunzhaosheng@hisilicon.com>
    Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
    [ rjw: Changelog ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/base/power/runtime.c b/drivers/base/power/runtime.c
index 0ea2139c50d8..ccd296dbb95c 100644
--- a/drivers/base/power/runtime.c
+++ b/drivers/base/power/runtime.c
@@ -95,7 +95,7 @@ static void __update_runtime_status(struct device *dev, enum rpm_status status)
 static void pm_runtime_deactivate_timer(struct device *dev)
 {
 	if (dev->power.timer_expires > 0) {
-		hrtimer_cancel(&dev->power.suspend_timer);
+		hrtimer_try_to_cancel(&dev->power.suspend_timer);
 		dev->power.timer_expires = 0;
 	}
 }
